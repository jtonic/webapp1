/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/board": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the whole board
         * @description Retrieves the current state of the board and the winner.
         */
        get: operations["get-board"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/board/{row}/{column}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board row (vertical coordinate) */
                row: components["parameters"]["rowParam"];
                /** @description Board column (horizontal coordinate) */
                column: components["parameters"]["columnParam"];
            };
            cookie?: never;
        };
        /**
         * Get a single board square
         * @description Retrieves the requested square.
         */
        get: operations["get-square"];
        /**
         * Set a single board square
         * @description Places a mark on the board and retrieves the whole board and the winner (if any).
         */
        put: operations["put-square"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A text message describing an error */
        errorMessage: string;
        /** @example 1 */
        coordinate: number;
        /**
         * @description Possible values for a board square. `.` means empty square.
         * @example .
         * @enum {string}
         */
        mark: "." | "X" | "O";
        board: components["schemas"]["mark"][][];
        /**
         * @description Winner of the game. `.` means nobody has won yet.
         * @example .
         * @enum {string}
         */
        winner: "." | "X" | "O";
        status: {
            winner?: components["schemas"]["winner"];
            board?: components["schemas"]["board"];
        };
    };
    responses: never;
    parameters: {
        /** @description Board row (vertical coordinate) */
        rowParam: components["schemas"]["coordinate"];
        /** @description Board column (horizontal coordinate) */
        columnParam: components["schemas"]["coordinate"];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-board": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["status"];
                };
            };
        };
    };
    "get-square": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board row (vertical coordinate) */
                row: components["parameters"]["rowParam"];
                /** @description Board column (horizontal coordinate) */
                column: components["parameters"]["columnParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["mark"];
                };
            };
            /** @description The provided parameters are incorrect */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example Illegal coordinates */
                    "text/html": components["schemas"]["errorMessage"];
                };
            };
        };
    };
    "put-square": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board row (vertical coordinate) */
                row: components["parameters"]["rowParam"];
                /** @description Board column (horizontal coordinate) */
                column: components["parameters"]["columnParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["mark"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["status"];
                };
            };
            /** @description The provided parameters are incorrect */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["errorMessage"];
                };
            };
        };
    };
}
